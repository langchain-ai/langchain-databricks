[tool.poetry]
name = "langchain-databricks"
version = "0.1.0rc1"
description = "An integration package connecting Databricks and LangChain"
authors = []
readme = "README.md"
repository = "https://github.com/langchain-ai/langchain-databricks"
license = "MIT"

[tool.poetry.urls]
"Source Code" = "https://github.com/langchain-ai/langchain-databricks/tree/main/libs/databricks"
"Release Notes" = "https://github.com/langchain-ai/langchain-databricks/releases"

[tool.poetry.dependencies]
python = ">=3.8.1,<4.0"
langchain-core = ">=0.2.35"

# MLflow supports python 3.12 since https://github.com/mlflow/mlflow/commit/04370119fcc1b2ccdbcd9a50198ab00566d58cd2
mlflow = [
  { version = ">=2.16.0", python = ">=3.12" },
  { version = ">=2.9", python = "<3.12" },
]

# MLflow depends on following libraries, which require different version for Python 3.8 vs 3.12
numpy = [
  { version = ">=1.26.0", python = ">=3.12" },
  { version = ">=1.24.0", python = "<3.12" },
]
scipy = [
  { version = ">=1.11", python = ">=3.12" },
  { version = "<2", python = "<3.12" },
]
databricks-vectorsearch = "^0.40"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "^7.4.3"
pytest-asyncio = "^0.23.2"
pytest-socket = "^0.7.0"
langchain-core = { git = "https://github.com/langchain-ai/langchain.git", subdirectory = "libs/core" }

[tool.poetry.group.codespell]
optional = true

[tool.poetry.group.codespell.dependencies]
codespell = "^2.2.6"

[tool.poetry.group.test_integration]
optional = true

[tool.poetry.group.test_integration.dependencies]

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
ruff = "^0.5"

[tool.poetry.group.typing.dependencies]
mypy = "^1.10"
langchain-core = { git = "https://github.com/langchain-ai/langchain.git", subdirectory = "libs/core" }

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
langchain-core = { git = "https://github.com/langchain-ai/langchain.git", subdirectory = "libs/core" }

[tool.ruff.lint]
select = [
  "E",    # pycodestyle
  "F",    # pyflakes
  "I",    # isort
  "T201", # print
]

[tool.mypy]
disallow_untyped_defs = "True"

[tool.coverage.run]
omit = ["tests/*"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
# --strict-markers will raise errors on unknown marks.
# https://docs.pytest.org/en/7.1.x/how-to/mark.html#raising-errors-on-unknown-marks
#
# https://docs.pytest.org/en/7.1.x/reference/reference.html
# --strict-config       any warnings encountered while parsing the `pytest`
#                       section of the configuration file raise errors.
#
# https://github.com/tophat/syrupy
addopts = "--strict-markers --strict-config --durations=5"
# Registering custom markers.
# https://docs.pytest.org/en/7.1.x/example/markers.html#registering-markers
markers = [
  "compile: mark placeholder test used to compile integration tests without running them",
]
asyncio_mode = "auto"
